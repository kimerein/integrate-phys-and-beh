% runReactionTimeAnalysis.m

% script for running a frequently used subset of analyses

% DON'T FORGET: FEB_3 (mouse_id 4), FEB_4 (mouse_id 5) AND MITCH_NONE (mouse_id 19) WERE CONTROLS

%% load in data

exptDataDir='Z:\Kim\for_orchestra\combineReachData\O2 output\alltbt07Mar2022151900\'; % directory containing experimental data

if ismac==true
    sprtr='/';
else
    sprtr='\';
end

% only load these fields of alltbt
disp('loading alltbt');
whichFieldsToLoad={'cue','all_reachBatch','cueZone_onVoff','dprimes','isChewing','isHold','optoOn','optoZone','pawOnWheel','pelletPresent','reachBatch_all_pawOnWheel','reachBatch_drop_reachStarts','reachBatch_miss_reachStarts','reachBatch_success_reachStarts','reachStarts','pelletmissingreach_reachStarts','reachStarts_pelletPresent','times','times_wrt_trial_start','timesFromSessionStart'};
alltbt=loadStructFieldByField([exptDataDir sprtr 'alltbt'],whichFieldsToLoad); % load alltbt
disp('loading out');
trialTypes=loadStructFieldByField([exptDataDir sprtr 'out']); % load out
disp('loading metadata');
metadata=loadStructFieldByField([exptDataDir sprtr 'metadata']); % load metadata
a=load([exptDataDir sprtr 'reachExptAnalysis_settings.mat']); % load reach expt analysis settings 
reachExptSettings=a.settings;

% Optional
% Back-up full, unfiltered alltbt in workspace
backup.alltbt=alltbt;
backup.trialTypes=trialTypes;
backup.metadata=metadata;

% Optional: correct any LED trials for blinded control mice
% [alltbt,metadata,trialTypes]=turnOffLED(alltbt,metadata,trialTypes,[4 5 19]);

% Optional: discard preemptive
% [alltbt,trialTypes,metadata]=discardPreemptive(alltbt,trialTypes,metadata);

%% choose additional settings for reaction time analysis

settings=RTanalysis_settings('display settings','clear');

% find trials with long ITIs
trialTypes=getLongITIs(alltbt,trialTypes,settings);

trialTypes=getTimingOfOpto(alltbt,'optoOn',trialTypes,settings.multipleOptoTimes);
if ~isfield(trialTypes,'optoGroup')
    trialTypes.optoGroup=zeros(size(trialTypes.led));
end
trialTypes.led(~isnan(trialTypes.optoGroup))=1;

trialTypes.mouseid=metadata.mouseid;

% Optional: Fix sessids to match nth_sessions
u=unique(metadata.mouseid);
j=0;
for i=1:length(u)
    metadata.sessid(metadata.mouseid==u(i))=metadata.nth_session(metadata.mouseid==u(i))+j;
    j=j+nanmax(metadata.sessid(metadata.mouseid==u(i)));
end

% Optional: dprimes for each mouse, each session
[alltbt,trialTypes,metadata]=get_dprime_per_mouse(alltbt,trialTypes,metadata);
alltbt.dprimes(isinf(alltbt.dprimes))=3;

% Optional: how far through session is each trial
[metadata,fractionThroughSess]=howFarThroughSession(metadata,true,trialTypes);
alltbt.fractionThroughSess=metadata.fractionThroughSess;
trialTypes.fractionThroughSess=metadata.fractionThroughSess;

% Optional
% Back-up full, unfiltered alltbt in workspace
backup.alltbt=alltbt;
backup.trialTypes=trialTypes;
backup.metadata=metadata;

%% perform any filtering on alltbt
% for example, filter by d-prime

temp=datestr(datetime('now'));
temp(~ismember(temp,['A':'Z' 'a':'z' '0':'9']))=''; 
temp=temp(~isspace(temp));
saveDir=['/Volumes/Neurobio/MICROSCOPE/Kim/RT pairs data sets/' temp]; % where to save details of alltbt filtering and RT pairs data set

% filter settings
alltbt.mouseid=metadata.mouseid;
alltbt.sessid=metadata.sessid;
trialTypes.sessid=metadata.sessid;
% tbt_filter.sortField='mouseid';
% tbt_filter.sortField='fractionThroughSess';
tbt_filter.sortField='dprimes';
% tbt_filter.range_values=[2 3 4 5 6 7 8 9 10 11 12 14 15 17 18 19]; % which mice start at non-learning 
% tbt_filter.range_values=[1 2 4 5 6 7 8 9 10 11 12 17 18 19];
% tbt_filter.range_values=[1     2     3     6     7     8     9    10    11    12    14    15    17    18];
% tbt_filter.range_values=[1.5 2.5];
tbt_filter.range_values=[-100 100];
tbt_filter.name=[tbt_filter.sortField num2str(tbt_filter.range_values(1)) 'to' num2str(tbt_filter.range_values(2))];
temp=tbt_filter.name;
temp(~ismember(temp,['A':'Z' 'a':'z' '0':'9']))=''; 
temp=temp(~isspace(temp));
tbt_filter.name=temp;
tbt_filter.clock_progress=true;

% filter alltbt
[alltbt,trialTypes,metadata]=filtTbt(alltbt,trialTypes,tbt_filter.sortField,tbt_filter.range_values,metadata,tbt_filter.clock_progress);

%% build relevant data sets

% settings for paired RT data set
test.nInSequence=[2]; % defines trial pairs, e.g., 2 means will compare each trial with its subsequent trial, 3 means will compare each trial with the trial after next, etc.
% requirement for first trial in pair
% trial1='trialTypes.chewing_at_trial_start==0 | trialTypes.chewing_at_trial_start==1';
trialTypes.isLongITI_1forward=[trialTypes.isLongITI(2:end); 0];
trialTypes.optoGroup_1forward=[trialTypes.optoGroup(2:end); 0];
% trial1='trialTypes.optoGroup~=1';
trial1='trialTypes.led~=1 & trialTypes.led_1back~=1';
% trial1='trialTypes.isLongITI==1';
% trial1='trialTypes.chewing_at_trial_start==0 | trialTypes.chewing_at_trial_start==1';
% trial1='trialTypes.after_cue_success_1forward==1 & trialTypes.consumed_pellet_1forward==1 & trialTypes.led_1forward==0 & trialTypes.optoGroup_1forward~=1'; % & trialTypes.isLongITI_1forward==1'];
% trial1='trialTypes.touch_in_cued_window_1forward==1 & trialTypes.led_1forward==0 & trialTypes.optoGroup_1forward~=1 & trialTypes.optoGroup~=1  & trialTypes.isLongITI_1forward==1';
% trial1='trialTypes.cued_reach_1forward==1 & trialTypes.touched_pellet_1forward==1 & (trialTypes.led_1forward==0) & trialTypes.optoGroup~=1  & trialTypes.optoGroup_1forward~=1';
% trial1='trialTypes.cued_reach_1forward==0  & trialTypes.touched_pellet_1forward==1 & (trialTypes.led_1forward==0) & trialTypes.optoGroup~=1 & trialTypes.isLongITI_1forward==1';
% trial1='trialTypes.cued_reach_1forward==1 & trialTypes.consumed_pellet_1forward==0 & trialTypes.led_1forward==0 & trialTypes.optoGroup_1forward~=1 & trialTypes.optoGroup~=1 & trialTypes.isLongITI_1forward==1';
% trial1='trialTypes.optoGroup~=1 & trialTypes.consumed_pellet_1back==1 & trialTypes.after_cue_success_1forward==1 & trialTypes.consumed_pellet_1forward==1 & trialTypes.led_1forward==1 & trialTypes.optoGroup_1forward~=1';
test.trial1=trial1;
test.templateSequence2_cond=eval(trial1);
% trial2='trialTypes.chewing_at_trial_start==0 | trialTypes.chewing_at_trial_start==1';
% trial2='trialTypes.led==1 & trialTypes.optoGroup~=1 & trialTypes.optoGroup~=3';
% trial2='trialTypes.optoGroup~=1 & trialTypes.led==0 & (trialTypes.led_1forward==1 | trialTypes.led_2forward==1 | trialTypes.led_3forward==1 | trialTypes.led_4forward==1 | trialTypes.led_1back==1)';
% trial2='trialTypes.optoGroup~=1 & trialTypes.led==0';
trial2='trialTypes.optoGroup~=1 & trialTypes.led==0';
test.trial2=trial2;
test.templateSequence2_end=eval(trial2);
test.fillInBetweenWithAnything=true; % if true, will allow middle trials to be anything; otherwise, middle trials must match cond1
test.event_name=['alltrials' tbt_filter.name 'inBetweenAnything' num2str(test.fillInBetweenWithAnything)];

saveDir2=[saveDir '\' test.event_name];
mkdir(saveDir2);

% save settings for paired RT data set
save([saveDir2 '\test_settings.mat'],'test');

% build paired RT data set
fakeCueInd=50; % in indices, this is not relevant if not using PCA-based RT model
skipCorrected=true;
% this function builds the dataset using the trial type sequences specified above
[dataset,correctedDistributions]=buildReachingRTModel(alltbt,trialTypes,metadata,fakeCueInd,saveDir,test,skipCorrected); 

%% plot features in data set

% last argument chooses type of plot
% see function plotBehaviorEventFx.m for options
plotBehaviorEventFx(dataset.realDistributions,alltbt,[],'plot_rawReaching');
% plotBehaviorEventFx(dataset.realDistributions,alltbt,[],'plot_rawReaching_cdf'); 

%% plot trial to trial change in reach CDF

plotChangeInReachCDF(dataset.realDistributions,alltbt);

%% measure how reach rate changes over course of session

shuffleTrialOrder=false; % if want to randomly permute trial order to test for ordering effects

reachratesettings.epsilon_cue=0; % in seconds
reachratesettings.epsilon_uncue=2; % in seconds
reachratesettings.epsilon_beforecue=1; % in seconds
reachratesettings.percentOfReachesFromSess_forInitCond=20; % use this fraction of trials from beginning of session to get initial windows
reachratesettings.percentOfReachesFromSess_forInitRate=20; % use this fraction of trials from beginning of session to get initial reach rates
reachratesettings.maxTrialLength=9.5; % in sec, wrt cue
reachratesettings.minTrialLength=-2; % wrt cue, in sec
reachratesettings.suppressPlots=false;
 % sec wrt cue onset
reachratesettings.acrossSess_window1=[0.05 1]; % cued window [0.05 1]
% reachratesettings.acrossSess_window1=[4 7];
% note that after mouse gets a pellet, reaching is suppressed
reachratesettings.acrossSess_window2=[7 reachratesettings.maxTrialLength]; % beware reach suppression after a success
reachratesettings.acrossSess_window3=[reachratesettings.minTrialLength -1];
reachratesettings.scatterPointSize=50; % size for points in scatter plot
reachratesettings.addSatietyLines=false; % whether to add proportionality lines to figure
% reachratesettings.stopPlottingTrialsAfterN=500; % will stop plotting after this nth trial in session, also only use this many trials for regression fit -- see next line, also controls colormap
reachratesettings.stopPlottingTrialsAfterN=175; % will stop plotting
% after this nth trial in session, also only use this many trials for
% regression fit -- see next line, also controls colormap
reachratesettings.showFitLine=true; % whether to show linear fit to change across trials
reachratesettings.useWindowsForUncued=[3]; % to use window2 or window3 or both for the uncued reach rate
reachratesettings.initWindows=[]; % empty if want to calculate from dataset
reachratesettings.addSessionLines=false; % for no averaging across sessions plot, whether to connect trial bins within same session with lines
reachratesettings.binTrialsForAvAcrossSess=true; % whether to bin multiple trials for first figure, will bin into binThisManyTrials
reachratesettings.binThisManyTrials=6; % how many trials to bin within each session
reachratesettings.nBinsForZones=40; % will be nBinsForZones squared total bins, this is # bins for each x and y axis
reachratesettings.useRateMethod=3; % 1, 2 or 3 (see explanation below)
% There are 3 approaches available for determing reach rates
% Code will calculate all three but only return useRateMethod
%
% Approach 1: get reach rate in each window over course of session, where windows are specified
% wrt animal's behavior at the beginning of the session (fixed windows)
% i.e., take the average reaction time over the first X% of trials, where X
% is percentOfReachesFromSess_forInitCond, then windows are wrt this av
% reaction time, such that the following eqs hold given that t_n is this
% average reaction time
% window1 = @(t_cue,t_n,epsilon_cue) [t_cue nanmin([t_n+epsilon_cue maxTrialLength])];                % cued window 
% window2 = @(t_cue,t_n,epsilon_uncue) [nanmin([t_n+epsilon_uncue maxTrialLength]) maxTrialLength];   % after cued window
% window3 = @(t_cue,t_n,epsilon_beforecue) [minTrialLength t_cue-epsilon_beforecue];                  % before cue window     
%
% Approach 2: get reach rate in each window over course of session, where
% windows change with changing behavior over the course of session
% (non-fixed windows)
% i.e., using eqs for window1, window2, window3 above, calculate window
% using the reaction time on the nth trial, then apply this window for
% calculating the reach rate on the n+1th trial
%
% Approach 3: get reach rate in each window over course of session,
% where windows are fixed across all sessions
% i.e., use windows specified above as acrossSess_window1, acrossSess_window2, acrossSess_window3 

reachrates=plotChangeInReachProbability_fromRTdataset(dataset,metadata,alltbt,'cueZone_onVoff',shuffleTrialOrder,reachratesettings); 

%% Plot hallmarks of satiety

plotHallmarksOfSatiety(reachrates,dataset,alltbt,metadata,trialTypes);

%% shift in reach rate between trial pair

backup_test=test;

% get initial reach rates within each session using all trials
test.nInSequence=[2]; % defines trial pairs, e.g., 2 means will compare each trial with its subsequent trial, 3 means will compare each trial with the trial after next, etc.
trial1='trialTypes.chewing_at_trial_start==0 | trialTypes.chewing_at_trial_start==1';
trial2='trialTypes.chewing_at_trial_start==0 | trialTypes.chewing_at_trial_start==1';
test.trial1=trial1;
test.templateSequence2_cond=eval(trial1);
test.trial2=trial2;
test.templateSequence2_end=eval(trial2);
test.fillInBetweenWithAnything=true; % if true, will allow middle trials to be anything; otherwise, middle trials must match cond1
test.event_name=['alltrials' tbt_filter.name 'inBetweenAnything' num2str(test.fillInBetweenWithAnything)];
saveDir2=[saveDir '\' test.event_name];
mkdir(saveDir2);
save([saveDir2 '\test_settings.mat'],'test');
skipCorrected=true;
dataset=buildReachingRTModel(alltbt,trialTypes,metadata,50,saveDir,test,skipCorrected); 
reachratesettings.initWindows=[]; 
reachratesettings.suppressPlots=true;
reachrates=plotChangeInReachProbability_fromRTdataset(dataset,metadata,alltbt,'cueZone_onVoff',shuffleTrialOrder,reachratesettings); 
initWindows{1}=reachrates.init_fixed_window1;
initWindows{2}=reachrates.init_fixed_window2;
initWindows{3}=reachrates.init_fixed_window3;
reachratesettings.initWindows=initWindows; 
% then run trial pairs
test=backup_test;
dataset=buildReachingRTModel(alltbt,trialTypes,metadata,50,saveDir,test,skipCorrected); 
reachrates=plotChangeInReachProbability_fromRTdataset(dataset,metadata,alltbt,'cueZone_onVoff',shuffleTrialOrder,reachratesettings); 
plotPairedChangeMinusSatiety(reachrates);

%% plot outcome-dependent shifts

outcomeDependentShift_wrapper(alltbt,trialTypes,metadata,saveDir,[],[]);

%% plot outcome-dependent shifts AND separate by dprime

alltbt=backup.alltbt; trialTypes=backup.trialTypes; metadata=backup.metadata;
outcomeDependentShift_acrossDprimes(alltbt,trialTypes,metadata);

%% plot change in behavior within session and across days for a single mouse (or average mouse)

% if want to do average mouse, use nth_session instead of sessid
doAverageMouse=true;
if doAverageMouse==true
    backup_sessid=alltbt.sessid;
    
    % for mice where didn't analyze each day, fix nth_session
    alltbt.sessid(alltbt.sessid==1)=1;
    alltbt.sessid(alltbt.sessid==2)=3;
    alltbt.sessid(alltbt.sessid==3)=7;
    alltbt.sessid(alltbt.sessid==4)=9;
    
    alltbt.sessid(alltbt.sessid==5)=2;
    alltbt.sessid(alltbt.sessid==6)=4;
    alltbt.sessid(alltbt.sessid==7)=8;
    alltbt.sessid(alltbt.sessid==8)=10;
    alltbt.sessid(alltbt.sessid==9)=12;
    alltbt.sessid(alltbt.sessid==10)=14;
    alltbt.sessid(alltbt.sessid==11)=16;
    
    alltbt.sessid(alltbt.sessid==16)=2;
    alltbt.sessid(alltbt.sessid==17)=4;
    alltbt.sessid(alltbt.sessid==18)=6;
    alltbt.sessid(alltbt.sessid==19)=20;
    alltbt.sessid(alltbt.sessid==20)=21;
    alltbt.sessid(alltbt.sessid==21)=22;
    
    alltbt.sessid(alltbt.sessid==37)=3;
    alltbt.sessid(alltbt.sessid==38)=4;
    
    alltbt.sessid(alltbt.sessid==75)=1;
    alltbt.sessid(alltbt.sessid==76)=21;
    alltbt.sessid(alltbt.sessid==77)=22;
    alltbt.sessid(alltbt.sessid==78)=23;
    
    alltbt.sessid(alltbt.sessid==153)=1;
    alltbt.sessid(alltbt.sessid==154)=5;
    alltbt.sessid(alltbt.sessid==155)=7;
    alltbt.sessid(alltbt.sessid==156)=9;
    alltbt.sessid(alltbt.sessid==157)=13;
    alltbt.sessid(alltbt.sessid==158)=15;
    alltbt.sessid(alltbt.sessid==159)=17;
    alltbt.sessid(alltbt.sessid==160)=19;
    alltbt.sessid(alltbt.sessid==161)=21;
    alltbt.sessid(alltbt.sessid==162)=23;
    
    alltbt.sessid(alltbt.sessid==315)=6;
    alltbt.sessid(alltbt.sessid==316)=10;
    alltbt.sessid(alltbt.sessid==317)=12;
    alltbt.sessid(alltbt.sessid==318)=14;
    alltbt.sessid(alltbt.sessid==319)=16;
    alltbt.sessid(alltbt.sessid==320)=20;
    alltbt.sessid(alltbt.sessid==321)=22;
    alltbt.sessid(alltbt.sessid==322)=24;
    alltbt.sessid(alltbt.sessid==323)=27;
    alltbt.sessid(alltbt.sessid==324)=29;
    
    alltbt.sessid(alltbt.sessid==638)=1;
    alltbt.sessid(alltbt.sessid==639)=3;
    alltbt.sessid(alltbt.sessid==640)=7;
    alltbt.sessid(alltbt.sessid==641)=9;
    alltbt.sessid(alltbt.sessid==642)=11;
    alltbt.sessid(alltbt.sessid==643)=13;
    alltbt.sessid(alltbt.sessid==644)=21;
    alltbt.sessid(alltbt.sessid==645)=23;
    alltbt.sessid(alltbt.sessid==646)=25;
    alltbt.sessid(alltbt.sessid==647)=26;
    alltbt.sessid(alltbt.sessid==648)=29;
    alltbt.sessid(alltbt.sessid==649)=30;
    
    alltbt.sessid(alltbt.sessid==1287)=2;
    alltbt.sessid(alltbt.sessid==1288)=4;
    alltbt.sessid(alltbt.sessid==1289)=6;
    alltbt.sessid(alltbt.sessid==1290)=9;
    alltbt.sessid(alltbt.sessid==1291)=10;
    alltbt.sessid(alltbt.sessid==1292)=12;
    alltbt.sessid(alltbt.sessid==1293)=14;
    alltbt.sessid(alltbt.sessid==1294)=16;
    alltbt.sessid(alltbt.sessid==1295)=18;
    alltbt.sessid(alltbt.sessid==1296)=20;
    alltbt.sessid(alltbt.sessid==1297)=22;
    
    
    
    alltbt.sessid=metadata.nth_session;
    metadata.sessid=metadata.nth_session;
    trialTypes.sessid=metadata.nth_session;
    start_sessid=nanmin(metadata.nth_session);
%     end_sessid=nanmax(metadata.nth_session); % but may be quite noisy
    end_sessid=30;
else
    start_sessid=33;
    end_sessid=71;
end
% outlierTest='tempcued(j)>1 && i<10'; % make empty if don't want to remove any outlier points
outlierTest=[]; % make empty if don't want to remove any outlier points
% learningFigSaveDir='Z:\Kim\example mouse learning\';
learningFigSaveDir=[];
plotWithinSession_and_dayByDay(alltbt,metadata,trialTypes,start_sessid,end_sessid,learningFigSaveDir,'.png',outlierTest);
if doAverageMouse==true
    alltbt.sessid=backup_sessid;
    metadata.sessid=backup_sessid;
    trialTypes.sessid=backup_sessid;
end
