function settings=trialTypeSettings()

% This function defines types of behavioral trials
% Modify this function to change trial-type classification scheme


RTsettings=RTanalysis_settings(); % go to this file to change experiment-specific parameters


% Threshold for event detection
settings.lowThresh=RTsettings.lowThresh; % threshold for detecting events in trial-by-trial behavior data structure


% Get information about trial structure from RTsettings
trialStructure.durationOfWheelTurn=RTsettings.durationOfWheelTurn; % duration of pellet presenter wheel turn, in seconds 
trialStructure.wheelStopsThisManySecsBeforeCue=RTsettings.wheelStopsThisManySecsBeforeCue; % time window between pellet presenter wheel stopping and cue onset, in seconds
trialStructure.cueDuration=RTsettings.cueDuration; % duration of cue, in seconds
trialStructure.maxTrialDuration=RTsettings.maxTrialDuration; % maximum duration of a trial, in seconds
trialStructure.timeSlop=RTsettings.timeSlop; % max possible error in timing due to frame rate in movie and/or alignment approach, in seconds


% "Reach batch" definition
reach_batch.window=0.3; % in seconds, reaches must occur within this many seconds of each other to be in same batch
reach_batch.firstreach_type={'miss_reachStarts'}; % first reach must be one of these types
reach_batch.secondreach_type={'success_reachStarts_pawOnWheel','drop_reachStarts_pawOnWheel','miss_reachStarts_pawOnWheel'}; % second reach must be one of these types
reach_batch.take_first_or_second_type=2; % number indicates whether to convert batch to the type of the first or second reach
reach_batch.take_first_or_second_timing=1; % number indicates whether to set reach timing at the timing of the first or second reach in b


% Define time windows within a trial relative to cue onset
% Mouse "reached after cue" if mouse reached within cued_reach_window:
timeWindow(1).name='cued_reach_window';
timeWindow(1).start=RTsettings.reachAfterCueWindow_start; % define start of time window in which to say mouse "reached after cue", seconds from cue onset
timeWindow(1).end=RTsettings.reachAfterCueWindow_end;  % define end of time window in which to say mouse "reached after cue", seconds from cue onset 
% wheel_turning is time window relative to cue onset when wheel is turning
timeWindow(2).name='wheel_turning';
timeWindow(2).start=-trialStructure.durationOfWheelTurn-trialStructure.wheelStopsThisManySecsBeforeCue;
timeWindow(2).end=-trialStructure.wheelStopsThisManySecsBeforeCue;
% after_cue is time window from cue onset to end of trial
timeWindow(3).name='after_cue';
timeWindow(3).start=0-trialStructure.timeSlop; % in seconds from cue onset
timeWindow(3).end=trialStructure.maxTrialDuration; 
% all_times refers to entire trial
timeWindow(4).name='all_times';
timeWindow(4).start=0-trialStructure.durationOfWheelTurn-trialStructure.wheelStopsThisManySecsBeforeCue; % trial begins when pellet presenter wheel begins to turn
timeWindow(4).end=trialStructure.maxTrialDuration; 


% Test whether paw was on wheel while wheel turning
bool_test(1).testwhat='single reach';
bool_test(1).fieldname='pawOnWheel';
bool_test(1).test='any';
bool_test(1).thresh=settings.lowThresh;
bool_test(1).comparator='>';
bool_test(1).window='wheel_turning';

% Result of first "reach batch" after cue
% Note that "reach batch" refers to the outcome of the last reach in set of
% contiguous reaches
bool_test(2).testwhat='reach batch';
bool_test(2).fieldname='success_reachStarts';
bool_test(2).test='first';
bool_test(2).thresh=settings.lowThresh;
bool_test(2).comparator='>';
bool_test(2).window='after_cue';

bool_test(3).testwhat='reach batch';
bool_test(3).fieldname='drop_reachStarts';
bool_test(3).test='first';
bool_test(3).thresh=settings.lowThresh;
bool_test(3).comparator='>';
bool_test(3).window='after_cue';

bool_test(4).testwhat='reach batch';
bool_test(4).fieldname='miss_reachStarts';
bool_test(4).test='first';
bool_test(4).thresh=settings.lowThresh;
bool_test(4).comparator='>';
bool_test(4).window='after_cue';

bool_test(5).testwhat='reach batch';
bool_test(5).fieldname='pelletmissingreach_reachStarts';
bool_test(5).test='first';
bool_test(5).thresh=settings.lowThresh;
bool_test(5).comparator='>';
bool_test(5).window='after_cue';

% Did mouse consume pellet on this trial?
% Build up boolean tests to assess this
bool_test(6).testwhat='single reach';
bool_test(6).fieldname='success_reachStarts_pawOnWheel';
bool_test(6).test='any';
bool_test(6).thresh=settings.lowThresh;
bool_test(6).comparator='>';
bool_test(6).window='all_times';

bool_test(7).testwhat='single reach';
bool_test(7).fieldname='success_reachStarts';
bool_test(7).test='any';
bool_test(7).thresh=settings.lowThresh;
bool_test(7).comparator='>';
bool_test(7).window='all_times';

% Did mouse touch pellet on this trial?
% Build up boolean tests to assess this
bool_test(8).testwhat='single reach';
bool_test(8).fieldname='drop_reachStarts_pawOnWheel';
bool_test(8).test='any';
bool_test(8).thresh=settings.lowThresh;
bool_test(8).comparator='>';
bool_test(8).window='all_times';

bool_test(9).testwhat='single reach';
bool_test(9).fieldname='drop_reachStarts';
bool_test(9).test='any';
bool_test(9).thresh=settings.lowThresh;
bool_test(9).comparator='>';
bool_test(9).window='all_times';

% Did mouse perform a cued reach?
% Build up boolean tests to assess this
bool_test(10).testwhat='single reach';
bool_test(10).fieldname='reach_starts';
bool_test(10).test='any';
bool_test(10).thresh=settings.lowThresh;
bool_test(10).comparator='>';
bool_test(10).window='cued_reach_window';


% Put together bool_test results to get trial classifications
% Each index into trialtype(i).outcomes vector of length n refers to outcome of bool_tests 1:n
% If index i is nan, bool_tests(i) can be either 0 or 1 (false or true)
trialtype(1).outcomes=[0 1 0 0 0 nan nan nan nan nan];
trialtype(1).name='after_cue_success';
trialtype(1).bool='&';

trialtype(2).outcomes=[0 0 1 0 0 nan nan nan nan nan];
trialtype(2).name='after_cue_drop';
trialtype(2).bool='&';

trialtype(3).outcomes=[0 0 0 1 0 nan nan nan nan nan];
trialtype(3).name='after_cue_miss';
trialtype(3).bool='&';

trialtype(4).outcomes=[0 0 0 0 1 nan nan nan nan nan];
trialtype(4).name='after_cue_no_pellet';
trialtype(4).bool='&';

trialtype(5).outcomes=[1 1 0 0 0 nan nan nan nan nan];
trialtype(5).name='paw_during_wheel_after_cue_success';
trialtype(5).bool='&';

trialtype(6).outcomes=[1 0 1 0 0 nan nan nan nan nan];
trialtype(6).name='paw_during_wheel_after_cue_drop';
trialtype(6).bool='&';

trialtype(7).outcomes=[1 0 0 1 0 nan nan nan nan nan];
trialtype(7).name='paw_during_wheel_after_cue_miss';
trialtype(7).bool='&';

trialtype(8).outcomes=[1 0 0 0 1 nan nan nan nan nan];
trialtype(8).name='paw_during_wheel_after_cue_no_pellet';
trialtype(8).bool='&';

trialtype(9).outcomes=[nan nan nan nan nan 1 1 nan nan nan];
trialtype(9).name='consumed_pellet';
trialtype(9).bool='|';

trialtype(10).outcomes=[nan nan nan nan nan 1 1 1 1 nan];
trialtype(10).name='touched_pellet';
trialtype(10).bool='|';

trialtype(11).outcomes=[0 nan nan nan nan nan nan nan nan 1];
trialtype(11).name='cued_reach';
trialtype(11).bool='&';


% Output settings
settings.reach_batch=reach_batch;
settings.trialStructure=trialStructure;
settings.timeWindow=timeWindow;
settings.bool_test=bool_test;
settings.trialtype=trialtype;

end